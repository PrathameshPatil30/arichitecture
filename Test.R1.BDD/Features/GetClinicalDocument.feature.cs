// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Test.R1.BDD.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class GetClinicalDocumentFeature : object, Xunit.IClassFixture<GetClinicalDocumentFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
        public GetClinicalDocumentFeature(GetClinicalDocumentFeature.FixtureData fixtureData, Test_R1_BDD_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "GetClinicalDocument", "\tIn order to get patients document details\r\n\tAs a R1 Chart Master\r\n\tI want to ret" +
                    "rieve patients document details in specific JSON format", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        public virtual void ToGetClinicalDocumentDetails(string facilityCode, string accountNumber, string code, string responseMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "GetClinicalDocumentDetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("To Get Clinical Document Details", null, @__tags);
            this.ScenarioInitialize(scenarioInfo);
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                testRunner.Given("I have received Patients Facility Code and Account Number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                testRunner.When(string.Format("I make API call and pass \"{0}\" and \"{1}\"", facilityCode, accountNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                testRunner.Then(string.Format("The GET API call user receive HTTP response {0}", code), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                testRunner.And(string.Format("\"{0}\" in response body of GET API call", responseMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="To Get Clinical Document Details: SJPR")]
        [Xunit.TraitAttribute("FeatureTitle", "GetClinicalDocument")]
        [Xunit.TraitAttribute("Description", "To Get Clinical Document Details: SJPR")]
        [Xunit.TraitAttribute("Category", "GetClinicalDocumentDetails")]
        public virtual void ToGetClinicalDocumentDetails_SJPR()
        {
            this.ToGetClinicalDocumentDetails("SJPR", "", "400", "The accountNumber field is required.", ((string[])(null)));
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="To Get Clinical Document Details: ")]
        [Xunit.TraitAttribute("FeatureTitle", "GetClinicalDocument")]
        [Xunit.TraitAttribute("Description", "To Get Clinical Document Details: ")]
        [Xunit.TraitAttribute("Category", "GetClinicalDocumentDetails")]
        public virtual void ToGetClinicalDocumentDetails_()
        {
            this.ToGetClinicalDocumentDetails("", "123456", "400", "The facilityCode field is required.", ((string[])(null)));
        }
        
        public virtual void ToGetClinicalDocumentDetailsFromGETAPI(string facilityCode, string accountNumber, string code, string responseMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "GetClinicalDocumentDetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("To Get Clinical Document Details from GET API", null, @__tags);
            this.ScenarioInitialize(scenarioInfo);
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                testRunner.Given("I have received Patients Facility Code and Account Number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
                testRunner.When(string.Format("I make API call and pass \"{0}\" and \"{1}\"", facilityCode, accountNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
                testRunner.Then(string.Format("The GET API call user receive HTTP response {0}", code), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
                testRunner.And(string.Format("We should receive status \"{0}\"", responseMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="To Get Clinical Document Details from GET API: SJPR")]
        [Xunit.TraitAttribute("FeatureTitle", "GetClinicalDocument")]
        [Xunit.TraitAttribute("Description", "To Get Clinical Document Details from GET API: SJPR")]
        [Xunit.TraitAttribute("Category", "GetClinicalDocumentDetails")]
        public virtual void ToGetClinicalDocumentDetailsFromGETAPI_SJPR()
        {
            this.ToGetClinicalDocumentDetailsFromGETAPI("SJPR", "987456", "200", "No records found", ((string[])(null)));
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="To Get Clinical Document Details from GET API: ALAL")]
        [Xunit.TraitAttribute("FeatureTitle", "GetClinicalDocument")]
        [Xunit.TraitAttribute("Description", "To Get Clinical Document Details from GET API: ALAL")]
        [Xunit.TraitAttribute("Category", "GetClinicalDocumentDetails")]
        public virtual void ToGetClinicalDocumentDetailsFromGETAPI_ALAL()
        {
            this.ToGetClinicalDocumentDetailsFromGETAPI("ALAL", "123456", "200", "No records found", ((string[])(null)));
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                GetClinicalDocumentFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                GetClinicalDocumentFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
